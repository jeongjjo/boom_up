<!DOCTYPE html>
<html lang="ko" class="default-style layout-fixed layout-navbar-fixed navbar-fixed-bottom">

    <head>
        <%-include('../_layouts/header')%>
        <%-include('../_layouts/layout_bodyscript')%>
    </head>

    <body>
        <%-include('../_layouts/layout_bodystart')%>
        <div class="app header footer" id="contentbody">
            <%-include('../_parts/_new_header')%>
            <!-- content -->
            <div class="app-width-size container-fluid p-0 m-0" style="background-color:#ffffff" id="mainbody">
                <div class="main-profile-wrapper">
                    <div class="user-info-wrapper">
                        <div class="profile-wrapper">
                            <% if (Userinfo.photo == undefined || Userinfo.photo === null || Userinfo.photo == "" ) { %>
                                <img class="npf-img-profile target_photo" alt="..." src="/img/pro-image.png" onclick="onprofilePhoto(this, 'new');">
                            <% } else { %>
                                <img class="npf-img-profile target_photo" alt="..." src="<%=getPhotoEx(Userinfo.photo,2,0)%>" onclick="onprofilePhoto(this, 'edit');">
                            <% } %>
                            <div class="nickname-wrapper" onclick="javascript:void(0);modNick()">
                                <img src="/img/new/ID_reform.svg"/>
                                <span class="profile-name"><%= Userinfo ? Userinfo.nickname : '' %></span>
                            </div>
                        </div>
                        <div class="level-info">
                            <div class="level-point">
                                <%=Userinfo.boomLevel?parseInt(Userinfo.boomLevel).toLocaleString():0%>
                            </div>
                            <div class="level">
                                Lv.<%=Userinfo.level?Userinfo.level:1%>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="app-width-size container-fluid p-0 m-0" style="z-index: 1000;background-color:#ffffff" id="mainbody">
                    <div class="level-wrapper">
                        <div class="level-info-wrapper">
                            <img src="/img/new/level_<%=Userinfo.level?Userinfo.level:1%>.svg"/>
                            <div class="exchange-btn" style="margin-top:20px">
                                <%=Userinfo.boomLevel?parseInt(Userinfo.boomLevel).toLocaleString():0%> 붐코인으로 교환하기
                            </div>
                            <div class="sub-boom-btn" style="margin-top:20px">
                                서브붐 개설하기
                            </div>
                        </div>
                    </div>
                    <!--ㅂㅣ공개-->
                    <div id="popuplayerAdv-subboom" class="position-fixed hidden" onclick="event.stopPropagation();">
                        <div class="popup-layer" onclick="event.stopPropagation();closePopSub();">
                            <header class="position-fixed d-flex flex-row" style="padding:22px 0;">
                                <div class="left d-flex default-header-left">
                                    <div class="text-center align-self-center  header-side-width">
                                        <div id="idHeaderLeft-betting" class="header-arrow-left" onclick="closePopSub()"></div>
                                    </div>
                                </div>
                                <div class="centre flex-fill text-center align-self-center font-weight-bold">
                                    <span>
                                        서브붐 개설하기
                                    </span>
                                </div>
                            </header>
                        </div>

                        <div class="popup-bottom">
                            <div class="main-title">서브붐 URL과 이름을 입력해주세요</div>
                            <div class="subboom-wrapper">
                                <input class="subboom-key" placeholder="서브붐 URL을 영문으로만 입력 해주세요"/>
                                <input class="subboom-name" placeholder="서브붐 명을 입력 해주세요"/>
                            </div>
                            <div class="sub-btn">서브붐 개설하기</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <%-include('../_parts/_footer')%>


        <script src="/js/plupload/plupload.full.min.js"></script>
        <script type="text/javascript">
            var phototype = null;
            var targetid = "<%=Userinfo._id %>";
            var _auth = <%= _isAuthed %>;
            var ismine = "<%= isMine %>";
            var maintype = "inkiup";
            var g_fliter = "24rank";
            var limit = 20;
            var isBlocked = <%= blocked %>
            var isTap = "post";
            var boomPoint = <%= Userinfo.boomPower? parseInt(Userinfo.boomPower): 0 %>
            if(boomPoint > 300000){
                $('.sub-boom-btn').addClass('active')
                $('.sub-btn').addClass('active')
            }
            function closePopSub(){
                $('#popuplayerAdv-subboom').addClass('hidden')
            }
            $('.sub-boom-btn').on('click', function(){
                if(boomPoint < 300000){
                    onPopup("alert", "붐 포인트가 부족합니다.", function(cb){});
                    return false
                }
                $('#popuplayerAdv-subboom').removeClass('hidden')
            });
            $('.sub-btn').on('click', function(){
                if(boomPoint < 300000){
                    onPopup("alert", "붐 포인트가 부족합니다.", function(cb){});
                    return false
                }
                let key = $('.subboom-key').val()
                let name = $('.subboom-name').val()
                let data = {
                    lineupKey: key,
                    lineup: name,
                    userId: '<%=Userinfo._id%>'
                }
                $.ajax({
                    method: 'post',
                    url: '/profile/subboom',
                    data: data,
                    success: function (data, status, xhr) {
                        if(data.result=="ok"){
                            location.reload()
                        }
                        else if(data.result == "exist"){
                            onPopup("alert", "이미 존재하는 키 입니다", function(cb){});
                            return false
                        }
                        else {
                            onPopup("alert", "서브붐 생성에 실패 했습니다", function(cb){});
                            return false
                        }
                    },
                    error: function (xhr, status, err) {
                    },
                    complete: function () {
                    }
                });
            })

            <%if (!_isInApp) {%>
            var uploader = new plupload.Uploader({
                runtimes: 'html5,html4',
                browse_button: 'pickfiles',
                url: "/api/attach",
                resize: {
                    width: 1280,
                    quality: 95
                },
                filters : {
                    max_file_size : '100mb',
                    mime_types: [
                        {title : "file", extensions : "jpg,png,jpeg,JPG,PNG,JPEG"}
                    ]
                },
                init: {
                    FilesAdded: function(up, files) {
                            uploader.start();
                            return false;
                    },
                    FileUploaded: function (up, file, response) {
                        if($("#action_img").length > 0) {
                            photoVBtype = "edit";
                        } else {
                            phototype = "new";
                        }
                        onResultData(JSON.parse(response.response).data);
                    },
                    Error: function (up, err) {
                        console.log(err);
                        if(err.code == -600) {
                            onPopup("alert", "<%= __('UPLOADMSG')%>", function(cb){ });
                        }
                    }
                }
            });
                uploader.init();
        <%}%>



            cashePage({
                onBeforeUnload: () => {
                    return {
                        selector: "#main_list",
                        chk_post: $("#chk_post").attr("checked"),
                        chk_reply: $("#chk_reply").attr("checked"),
                        chk_vote: $("#chk_vote").attr("checked")
                    }
                }
            });


            (function () {
                setHeader(<%=isMain %> ? '' : 'back', 'more',
                {
                    more: (e) => {
                        e.preventDefault();
                        if (!<%= _isAuthed %>) return;
                        //Popup2On("profile", "<%=currUserId%>", (val, id) => { callbackPopup(val, id) });
                        if(ismine == "true") {
                            PopupOn('', nprofilemy, function (val) {
                                setTimeout(function () {
                                    myProfileResultPopup(val);
                                }, 300);
                            });
                        } else {
                            var type = nprofileyou;
                            if(isBlocked) {
                                type = nProfileUnblocked;
                            }
                            PopupOn('', type, function (val) {
                                setTimeout(function () {
                                    profileResultPopup(val);
                                }, 300);
                            });

                        }
                    }
                });

                var $mainTopArea = $("#main-hidden-menu");
                var mainTopHeight = $mainTopArea.outerHeight();
                $(<% if (_isInApp) { %>".app"<%} else {%>window<%}%>).scroll(function(){
                    var y = $(<% if (_isInApp) { %>".app"<%} else {%>window<%}%>).scrollTop();
                    if (y >= mainTopHeight) {
                        $("#scroll-fixed-area").addClass('scroll-fixed-area');
                    } else {
                        $("#scroll-fixed-area").removeClass('scroll-fixed-area')
                    }
                });

                // $("#comm-input-area").addClass("hidden");
                // $("#comm-more-area, #comment_more").removeClass("hidden");
                $("#comm-input-area, #comm-more-area").addClass("hidden");

                $(".icon-my-footer").addClass("font-weight-bold");

                $("#board-list-area").addClass("mb-4");
                $("#comment-list-area").addClass("mb-4");
            })();


            $("#contentbody").naaEvent({
                main: '#main_list',
                onMore: () => {
                    //getProfileData('N');
                },
                onScroll: () => {
                    //visibleBoardItem();
                }
            });

            function modNick(){
                let nm = prompt('변경할 닉네임을 입력해주세요')
                if(!onCheckVal(nm)){
                    onPopup("alert", "<%= __('VALIDATOR_INVALIDNN')%>", function(cb){ });
                    return;
                }
                if (nm.length<2){
                    onPopup("alert", "<%= __('NICKNAMEDUP')%>", function(cb){ });
                    return
                }
                $.ajax({
                    type: "put",
                    url: "/profile/modify",
                    data: { nickname: nm },
                    success: function(res) {
                        if(res.result == "ok") {
                            location.reload()
                        } else if(res.result == "dup") {
                            onPopup("alert", "<%= __('AUTH_ALREADYUSE')%>", function(cb){ });
                        }
                    },
                    error: function(error) {

                    }
                })
            }

            function myProfileResultPopup(val) {
                //console.log(val);
                if(val == "share") {

                    <%if (!_isInApp) {%>
                        if (typeof ClipboardJS !== 'undefined') {
                            $('#copypasteModal').on('show.bs.modal', function (event) {
                                var modal = $(this);
                                modal.find('#copy-url').val('<%=serviceinfo.defaultUrl+"/profile/main/"+Userinfo._id.toHexString() %>');
                            }).on('shown.bs.modal', function (event) {
                                var modal = $(this);
                                if (typeof ClipboardJS !== 'undefined') {
                                    var clipboard = new ClipboardJS('.btnCnP');

                                    clipboard.on('success', function (e) {
                                        $('#copypasteModal').modal('hide');
                                    });
                                    clipboard.on('error', function (e) {
                                        $('#copypasteModal').modal('hide');
                                    });
                                }
                            }).modal();
                        }
                    <% } else { %>
                        shareLink("<%=Userinfo.nickname%>", "<%=Userinfo.message%>", "/profile/main/<%=Userinfo._id.toHexString()%>", "<%=getPhotoEx(user.photo,3,1)%>");
                    <% } %>
                } else if (val == "blocklist") {
                    location.href="/setting/blockeduserlist";
                } else if (val == "memolist") {
                    location.href="/setting/memo";
                }
            }

            function profileResultPopup(val) {
                //console.log(val);
                if(val == "share") {
                    <%if (!_isInApp) {%>
                        if (typeof ClipboardJS !== 'undefined') {
                            $('#copypasteModal').on('show.bs.modal', function (event) {
                                var modal = $(this);
                                modal.find('#copy-url').val('<%=serviceinfo.defaultUrl+"/profile/main/"+Userinfo._id.toHexString() %>');
                            }).on('shown.bs.modal', function (event) {
                                var modal = $(this);
                                if (typeof ClipboardJS !== 'undefined') {
                                    var clipboard = new ClipboardJS('.btnCnP');

                                    clipboard.on('success', function (e) {
                                        $('#copypasteModal').modal('hide');
                                    });
                                    clipboard.on('error', function (e) {
                                        $('#copypasteModal').modal('hide');
                                    });
                                }
                            }).modal();
                        }
                    <% } else { %>
                        shareLink("<%=Userinfo.nickname%>", "<%=Userinfo.message%>", "/profile/main/<%=Userinfo._id.toHexString()%>", "<%=getPhotoEx(user.photo,3,1)%>");
                    <% } %>
                } else if (val == "blockaction") {

                        var msg = "<%- __('BLOCKMSG')%>", action = 'd';
                        if(isBlocked) {
                            msg = "<%- __('UNBLOCKMSG')%>"; action = 'i'
                        }
                        //if (val == "unblock") {
                        //}
                        onPopup("confirm", msg, function (cb) {
                        if (cb == 1) {
                            $.ajax({
                            method: 'put',
                            url: '/profile/block',
                            data: {
                                id: '<%=Userinfo._id.toHexString()%>',
                                nm: '<%=Userinfo.nickname%>',
                                action: action// i,d
                            },
                            success: function (data, status, xhr) {
                                location.reload();
                            },
                            error: function (xhr, status, err) { },
                            complete: function () { }
                            });
                        }
                    });

                } else if (val == "memoaction") {
                    location.href="/setting/memodetail/<%=Userinfo._id.toHexString()%>"
                }
            }

            function visibleBoardItem() {
                $("div[id|=board-area]:not(.visible)").filter((i, s) => {
                    var height = $(s).height();
                    var docViewTop = $(".app").scrollTop();
                    var docViewBottom = docViewTop + $(".app").height() + (height * 2);
                    var elemTop = s.offsetTop;
                    var elemBottom = elemTop + height;
                    return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
                }).addClass("visible");
            }

            function scroll() {
                $(<% if (_isInApp) { %>".app"<%} else {%>window<%}%>).scroll(function () {
                    clearTimeout($.data(this, 'scrollTimer'));
                    $.data(this, 'scrollTimer', setTimeout(() => {
                        var scrollT = $(<% if (_isInApp) { %>".app"<%} else {%>window<%}%>).scrollTop();
                        var scrollH = $(this).height();
                        var contentH = $(<% if (_isInApp) { %>".app"<%} else {%>window<%}%>).height();
                        //console.log(scrollT + "    ////    " + scrollH + "     ////    "+ contentH);
                        if (scrollT + scrollH + 1 >= contentH) {
                            if(isTap == "post") {
                                getBoardList({
                                    kind: 'mycontent',
                                    targetId: targetid,
                                    limit: 30
                                }, (msg) => {
                                });
                            } else if (isTap == "reply") {

                            } else if (isTap == "updown") {

                            }
                        }
                    }, 250));
                });
            }

            function onprofilePhoto($this, type) {
                if(!(<%= _isInApp %>)) {
                    onPopup("alert", "<%= __('AUTH_PROFILEINAPP')%>", function(cb){ });
                } else {
                    phototype = type;
                    blockPage();
                    window.Attach && window.Attach.postMessage(JSON.stringify({ count: 1, video: false, iwidth: 1280, iheight: 720, iqual: 95, vqual: 0, vdur: -1, vaud: true }));
                }

            }

            function onResultData(result) {
                if (result != null) {

                    var attachList = [];
                    result.map(att => {
                        attachList = att.images;
                        if (phototype == "new") {
                            $(".profile-noimage, .pf-img-profile").remove();
                            var html = '<img class="mr-3 ml-1 pf-img-profile" src="' + att.images[0] + '">';
                            $("#profileimage").prepend(html);
                        } else {
                            $(".target_photo").attr("src", att.images[0]);
                        }
                    });
                    if (attachList.length > 0) {
                        var id = $("input[name=id]").val();
                        $.ajax({
                            type: 'PUT',
                            url: '/profile/image/' + id,
                            data: {
                                images: attachList[0],
                                thumbnail: attachList[1]
                            },
                            success: function (data) {
                                if (data.msg == "success") {

                                    onPopup("alert", "등록에 성공하셨습니다.", function (cb) { });
                                }
                            }, error: function (error) {
                                console.log(error);
                            }
                        });
                    }
                }
            }

            function onCheckVal(value){
                var pattern = /^[ㄱ-ㅎ|가-힣|a-z|A-Z|0-9|_|\u3130-\u3163\u4E00-\u9FFF|\u3040-\u30FC]{2,10}$/;
                var retValue=pattern.test(value);
                return retValue
            }

            function showPofilePop(id) {
                if (!<%= _isAuthed %>) return;
                Popup2On('list', id, (val, id) => { callbackPopup(val, id) });
            }

            function onProfileMove(e, userId) {
                e.stopPropagation();
                <% if (_isAuthed) { %>
                    location.href="/profile/main/" + userId
                        <% } %>
            }

            function onGoPostDetail($this, id) {
                var url = window.location.href;
                var parameters = (url.slice(url.indexOf('?') + 1, url.length)).split('&');
                var keyvalue
                var category="inkiup"
                for (var i=0; i<parameters.length;i++){
                    keyvalue = parameters[i].split('=');
                    //console.log(keyvalue,keyvalue.length)
                    if(keyvalue[0]=="k"){
                        category=keyvalue[1]
                    }
                }

                var pathHash = category
                location.href = '/detail/' + (pathHash || 'inkiup-24rank') + "/" + id;
            }

            function onGoPostDetailComment($this, id) {
                var pathHash = window.location.hash.replace("#", "");
                location.href = '/detail/' + (pathHash || 'inkiup-24rank') + "/" + id+"?cyn=Y";
            }

            // function onGoPostDetail(id) {
            //     var pathHash = 'profile'
            //     //프로필에서는 카테고리 선택이 없으므로 빈값으로 던져야 함
            //     location.href = '/detail/myprofile/' + id+ ""  ;
            // }

            function resultPopup(val) {
                shareLink("<%=Userinfo.nickname%>", "<%=(Userinfo.message||'').replace(/(\r\n|\n|\r)/gm, " ")%>", "/profile/main/<%=Userinfo._id.toHexString()%>", "<%=getPhotoEx(user.photo,3,1)%>");
            }


            function callbackPopup(val, id) {

            }

            var onsub = (obj) => {
                $.ajax({
                    method: 'put',
                    url: '/profile/sub',
                    data: {
                        id: $(obj).data('id'),
                        nm: $(obj).data('nm'),
                        action: $(obj).data('action') // i,d
                    },
                    success: function (data, status, xhr) {
                        if ($(obj).data('action') == 'i') {
                            $(obj).addClass('btn-primary').removeClass('btn-light').html("<%= __('SUB_READY')%>").data("action", "d");
                            $('#subscriberCount').html(parseInt($('#subscriberCount').html()) > 0 ? parseInt($('#subscriberCount').html()) - 1 : 0)
                        } else {
                            $(obj).removeClass('btn-primary').addClass('btn-light').html("<%= __('SUB_ING')%>").data("action", "i")
                            $('#subscriberCount').html(parseInt($('#subscriberCount').html()) + 1)
                        }
                        if (data && data.length === 1) { } else { }
                    },
                    error: function (xhr, status, err) { },
                    complete: function () { }
                })
            }
            var _searching = false;
            function getProfileData(first) {
                if (loadCachPage((data) => {
                    $("#chk_post").prop("checked", data.chk_post||null);
                    $("#chk_reply").prop("checked", data.chk_reply || null);
                    $("#chk_vote").prop("checked", data.chk_vote || null);
                })) {
                    return;
                }

                if (_searching) return;;
                _searching = true;
                var data = {
                    id: '<%=Userinfo._id %>',
                    first: first,
                    postCheck: $('#chk_post:checked').val() ? 'Y' : 'N',
                    lastPostId: $('._board').length > 0 ? $('._board').last().data('id') : 'none',
                    datgulCheck: $('#chk_reply:checked').val() ? 'Y' : 'N',
                    lastCommentId: $('._comment').length > 0 ? $('._comment').last().data('id') : 'none',
                    lastReplyId: $('._reply').length > 0 ? $('._reply').last().data('id') : 'none',
                    voteCheck: $('#chk_vote:checked').val() ? 'Y' : 'N',
                    lastVoteId: $('._vote').length > 0 ? $('._vote').last().data('id') : 'none',
                }
                //blockPage();
                $.get({
                    type: 'POST',
                    url: '/profile/profilelist/',
                    data: data,
                    success: function (html, status, xhr) {
                        if (first == 'Y') $('#main_list').empty();
                        var domList = $('#main_list');
                        domList.append(html);
                        //unblockPage();
                        typeof callback === 'function' && callback(list, status, xhr);
                        $('[data-toggle="tooltip"]').tooltip();
                    },
                    error: function (xhr, status, err) {
                        //unblockPage();
                        typeof callback === 'function' && callback(null, false, xhr);
                    },
                    complete: function () { _searching = false; }
                });
            }

            function onClickChk(obj) {
                obj&&obj.blur&&obj.blur();
                //getProfileData("Y");
            }

            function goLineup(c) {
                location.href = '/?k=' + c + '&t=24rank&ts=' + moment().valueOf();
                return false;
            }

            function onFullPhoto($this) {
                var photo = $($this).attr("src");
                onFullPhotoPopup(photo);
            }

            function onGoProfileModify($this, id) {
                location.href="/profile/modify/"+id
            }

            function onProfileTap($this, type) {
                if(isBlocked) return

                $("[id^=tap_]").removeClass("nprofile-category-highlight");
                $($this).addClass("nprofile-category-highlight");
                blockPage();
                switch(type) {
                    case "post":
                        isTap = "post";
                        $("#main_list").removeClass("hidden");
                        $("#comment_list").addClass("hidden");
                        getBoardList({
                            kind: 'mycontent',
                            targetId: targetid,
                            limit: 30
                        }, (msg) => {
                            unblockPage();
                        });
                    break;
                    case "reply":
                        isTap = "reply";
                        $("#main_list").addClass("hidden");
                        $("#comment_list").removeClass("hidden");
                        getCommentList({
                            contentId: targetid,
                            sort: "date-down",
                            cyn: "N",
                            limit: 30,
                            isProfile: "myprofile"
                        }, () => {
                            $("[name=delete-button-group]").hide();
                            unblockPage();
                        });
                    break;
                    case "updown":
                        isTap = "updown";
                        $("#main_list").removeClass("hidden");
                        $("#comment_list").addClass("hidden");
                        getBoardList({
                            kind: 'myupdown',
                            targetId: targetid,
                            count: 30,
                            limit: 30
                        }, () => {
                            $(".ismemo").hide();
                            $("[name=delete-button-group]").hide();
                            unblockPage();
                        });
                    break;
                }
            }

            function onGoMsg() {
                location.href='/chat/chatroom';
            }

        </script>
        <%-include('../_layouts/layout_bodyend')%>
    </body>

</html>
